<?xml version="1.0" encoding="utf-8" standalone="yes"?><search><entry><title>2024个人all in one全能型个人私有云平台</title><url>/post/2024-personal-all-in-one-allround-personal-private-cloud-platform-z10jrna.html</url><categories/><tags/><content type="html">  2024个人all in one全能型个人私有云平台 ​
个人 All-in-One 全能型私有云平台方案 一、方案概述 构建一个集多功能于一体的个人私有云平台，满足个人知识库、私有化应用\工具集，确保数据安全与隐私。
二、场景分析 （一）.移动外出场景 需求分析：
远程桌面（系统功能支持） 远程文件（应用） 文件同步（应用） （二）.个人\家庭数据管理场景 需求分析：
可扩展大容量私有云存储【硬件、应用】 高速的家庭局域网传输速度【硬件、应用】 外网小文件可接受传输速度【硬件、应用】 按使用率定期转移、备份、清理策略，确保可长期稳定存储【硬件、应用】 可快速检索【应用】 长期使用成本【如电费）可接受【硬件】 （三）.个人多媒体娱乐场景 需求分析：1. 局域网可投屏，4k硬解（硬件、应用） （四）.开发与学习、知识管理场景 需求分析：
信息输入 信息加工 信息输出为知识并存储至知识库，同步至博客、知乎等平台 其他功能应用安装 三、功能模块实现 （一）.远程访问与文件同步模块 远程桌面功能 ：安装Window10虚拟机，可连接远程Window桌面，通过部署Rust desk+内网穿透实现远程控制。 远程文件访问功能 ：docker部署Alist网盘+内网穿透 文件同步功能 ：docker部署seafile+内网穿透 （二）.家庭数据管理模块 私有云存储功能 ：在Window10里连接SSD固态硬盘临时作为主存储高速硬盘。安装istoreOS虚拟机，连接HDD硬盘作为冷存储硬盘。Window10通过WebDAV连接冷存储。安装Linux系统（centos7）虚拟机docker部署Alist并连接各存储 高速局域网传输功能 ：安装爱快软路由，规划网络如图所示。 外网小文件传输功能 ：docker部署seafile服务端，并配置内网、外网地址。 数据管理策略功能 ：使用Window10备份策略或者其他第三方软件定期备份系统至冷存储，小文件可通过seafile从各终端同步至主存储，大文件自行定期传至Alist网盘。 快速检索功能 ：小文件使用seafile进行检索，知识库检索使用思源笔记进行检索。 （三）.个人多媒体娱乐模块 局域网投屏功能 ：docker部署相关应用 4K 硬解功能 ：选购支持的cup （四）.开发与学习知识管理模块 信息输入功能 ：思源笔记多终端同步 信息 …  </content></entry><entry><title>CPU 监控命令w、 top、 htop、 glances</title><url>/post/cpu-monitoring-command-w-top-htop-glances-zxou0i.html</url><categories><category>技术</category></categories><tags><tag>Linux</tag></tags><content type="html"><![CDATA[  CPU 监控命令w、 top、 htop、 glances w命令 ​w [options] [username]​
$ w 21:45:07 up 1 day, 12:48, 1 user, load average: 1.05, 0.85, 0.56 USER TTY LOGIN@ IDLE JCPU PCPU WHAT debugpoi tty2 Thu08 36:48m 0.03s 0.03s /usr/libexec/gnome-session-binary 解释：USER​ 列给出了用户名，然后是终端号、登录日期时间、空闲时间、CPU 使用率，以及用户正在执行的进程。
​USER​ - 在你的 Linux 或 BSD 系统中登录的用户名称。 ​TTY​ - 当前会话的终端标识符号。 ​FROM​ - 用户的主机名或 IP 地址。 ​LOGIN@​ - 用户登录的时间。它有时会根据你的系统设置显示日期。 ​IDLE​ - 用户与终端交互后的空闲时间。 ​JCPU​ - 该会话的所有用户进程使用的 CPU 时间。 ​PCPU​ - 该用户的进程（在 WHAT​ 字段中提到）使用的时间。 ​WHAT​ - 当前带参数的进程。 要停止显示标题，使用 -h​ 选项。它与 --no-header​ 开关相同。
$ w -h ​-f​ 选项可以在输出中切换 FROM​ 字段的可见性。
$ w -f 使用 -s​ 选项打印一个简短的输出，不包括 JCPU​、PCPU​ 和 LOGIN@​ 信息。
$ w -s 要显示一个特定用户（例如，debugpoint​）拥有的所有进程的列表：
$ w debugpoint top命令 一、简介
top命令，它提供了一个动态的、交互式的实时视图，显示系统的整体性能信息以及正在运行的进程的相关信息。
语法：
​top [-] [d delay] [q] [c] [S] [s] [i] [n] [b]​
参数说明：
-d &amp;lt;秒数&amp;gt;：指定 top 命令的刷新时间间隔，单位为秒。
-n &amp;lt;次数&amp;gt;：指定 top 命令运行的次数后自动退出。
-p &amp;lt;进程ID&amp;gt;：仅显示指定进程ID的信息。
-u &amp;lt;用户名&amp;gt;：仅显示指定用户名的进程信息。
-H：在进程信息中显示线程详细信息。
-i：不显示闲 …  ]]></content></entry><entry><title>free命令</title><url>/post/free-command-sg6k1.html</url><categories><category>技术</category></categories><tags><tag>运维</tag></tags><content type="html"><![CDATA[  free命令 语　法： free [-bkmotV][-s &lt;间隔秒数&gt;] 补充说明：free 指令会显示内存的使用情况，包括实体内存，虚拟的交换文件内存，共享内存区段，以及系统核心使用的缓冲区等。 参　数： -b 以 Byte 为单位显示内存使用情况。 -k 以 KB 为单位显示内存使用情况。 -m 以 MB 为单位显示内存使用情况。 -o 不显示缓冲区调节列。 -s &lt;间隔秒数&gt; 持续观察内存使用状况。 -t 显示内存总和列。 -V 显示版本信息。 常用操作: free // 以KB为单位，显式系统内存使用情况 free -ml -s 1 //每秒以M为单位，显式系统内存详细使用情况。 free -c 4 -s 2 //为KB为单位，每2秒显式系统内存使用情况，一共显示4次 ​​
Mem 行(第二行)是内存的使用情况。
Swap 行(第三行)是交换空间的使用情况。
total 列显示系统总的可用物理内存和交换空间大小。
used 列显示已经被使用的物理内存和交换空间。
free 列显示还有多少物理内存和交换空间可用使用。
shared 列显示被共享使用的物理内存大小。
buff/cache 列显示被 buffer 和 cache 使用的物理内存大小。
available 列显示还可以被应用程序使用的物理内存大小。
————————————————
版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。
原文链接：https://blog.csdn.net/weixin_42832313/article/details/96484017
  ]]></content></entry><entry><title>用索尼官方lut文件恢复照片图片色彩（拍照忘记关log3）</title><url>/post/use-sony-s-official-lut-file-to-restore-photos-and-pictures-forgot-to-close-log3-2prtyf.html</url><categories><category>多媒体技术</category></categories><tags><tag>图片处理</tag></tags><content type="html">  用索尼官方lut文件恢复照片图片色彩（拍照忘记关log3） 拍照忘记关log3，拍出来图片灰灰的要命命，我觉得还可以抢救一下
工具：能打开camera raw的软件（Ps、Lr、Br）
参考：【【多此一举】如何在Lightroom中引入cube格式的lut进行调色】 https://www.bilibili.com/video/BV1iW4y1E7Aw/?share_source=copy_web&amp;vd_source=060a67fd53d735ce5086832f669200d5 用camera raw打开图片 ​​
创建含lut的配置 ​​
选择官方的lut（.cube）文件
​​
​​
点确定回到camera raw
加载配置 ​​
这时看到颜色已经回来了
​​
在Lr和Br中可以同步设置批量还原 ​​
  </content></entry><entry><title>Arch Linux使用archinstall快速安装配置2024版</title><url>/post/arch-linux-uses-archinstall-to-quickly-install-and-configures-version-2024-z1lazul.html</url><categories><category>技术</category></categories><tags><tag>运维</tag><tag>Linux</tag><tag>Arch Linux</tag></tags><content type="html">  Arch Linux使用archinstall快速安装配置2024版 参考：https://wiki.archlinuxcn.org/wiki/%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97
官方安装指南比较繁琐，有提供archinstall​但是并没有详细介绍对应配置项，本教程根据自身安装经历编写
安装前的准备 [​ 编辑 | 编辑源代码 ] 获取安装映像 [​ 编辑 | 编辑源代码 ] 打开 下载 页面，并根据需要的引导方式，获取 ISO 文件或 netboot 映像以及相应的 GnuPG 签名。
阿里源：https://mirrors.aliyun.com/archlinux/iso/latest/
页面如下：
Index of /archlinux/iso/latest/ File Name	File Size	Date Parent directory/	-	- arch/	-	2024-03-01 23:08 archlinux-2024.03.01-x86_64.iso	942.3 MB	2024-03-01 23:08 archlinux-2024.03.01-x86_64.iso.sig	141.0 B	2024-03-01 23:09 archlinux-2024.03.01-x86_64.iso.torrent	57.7 KB	2024-03-01 23:10 archlinux-bootstrap-2024.03.01-x86_64.tar.gz	182.5 MB	2024-03-01 23:09 archlinux-bootstrap-2024.03.01-x86_64.tar.gz.sig	141.0 B	2024-03-01 23:10 archlinux-bootstrap-x86_64.tar.gz	182.5 MB	2024-03-01 23:10 archlinux-bootstrap-x86_64.tar.gz.sig	141.0 B	2024-03-01 23:10 archlinux-x86_64.iso	942.3 MB	2024-03-01 23:10 archlinux-x86_64.iso.sig	141.0 B	2024-03-01 23:10 b2sums.txt	652.0 B …  </content></entry><entry><title>kubernetes支持swap的Linux发行版最小安装对比</title><url>/post/kubernetes-supports-the-minimum-installation-comparison-of-the-linux-distribution-version-of-swan-kr6g8.html</url><categories><category>技术</category></categories><tags><tag>运维</tag><tag>Linux</tag><tag>kubernetes</tag></tags><content type="html">  kubernetes支持swap的Linux发行版最小安装对比 结论：（最小安装以/​占用排名） Fedora39（1.2G） Debian-12.5.0（1.3G） Arch Linux 2024.03.01（2.1G） Ubuntu server 22.04 LTS（4.5G） 因此，Fedora和Debian选择自己熟悉的来吧
Linux 发行版 cgroup v2 支持 有关使用 cgroup v2 的 Linux 发行版的列表， 请参阅 cgroup v2 文档 。
注：下面系统都按x64安装
Container-Optimized OS（从 M97 开始）
注：此Linux版本为云端专用版本，不作比较 Ubuntu（从 21.10 开始，推荐 22.04+）
Ubuntu server 22.04 LTS 最小化安装占用4.5G
szh@szh:~$ df -h Filesystem Size Used Avail Use% Mounted on tmpfs 197M 792K 196M 1% /run /dev/mapper/ubuntu--vg-ubuntu--lv 11G 4.5G 5.7G 45% / tmpfs 982M 0 982M 0% /dev/shm tmpfs 5.0M 0 5.0M 0% /run/lock /dev/nvme0n1p2 2.0G 130M 1.7G 8% /boot /dev/nvme0n1p1 1.1G 6.1M 1.1G 1% /boot/efi tmpfs 197M 4.0K 197M 1% /run/user/1000 Debian GNU/Linux（从 Debian 11 Bullseye 开始）
Debian-12.5.0只安装ssh和标准工具包/​占用为1.3G
root@k8sNode1debian:~# df -h Filesystem Size Used Avail Use% Mounted on udev 961M 0 961M 0% /dev tmpfs 197M 696K 197M 1% /run /dev/mapper/k8sNode1debian--vg-root 15G 1.3G 13G 9% / tmpfs 984M 0 984M 0% /dev/shm tmpfs 5.0M 0 5.0M 0% /run/lock /dev/nvme0n1p1 455M 58M 372M 14% /boot tmpfs 197M 0 197M 0% /run/user/0 Fedora（从 31 开始）
Fedora39 server 最小安装/​占用为1.2G
[root@fedora ~]# df -h 文件系统 大小 已用 可用 已用% 挂载点 /dev/mapper/fedora-root 6.4G 1.2G 5.2G 19% / devtmpfs 4.0M 0 4.0M 0% /dev tmpfs 982M 0 982M 0% /dev/shm efivarfs 256K 48K 204K 19% /sys/firmware/efi/efivars tmpfs 393M 728K 392M 1% /run tmpfs 982M 0 982M 0% /tmp /dev/nvme0n1p2 960M 211M 750M 22% /boot /dev/nvme0n1p1 599M 7.5M 592M 2% /boot/efi tmpfs 197M 4.0K 197M 1% /run/user/0 Arch Linux（从 2021 年 4 月开始）
Arch Linux 2024.03.01版本，使用archinstall一键最小化安装/​占用为2.1G
[root@archlinux ~]# df -h Filesystem Size Used Avail Use% Mounted on dev 978M 0 978M 0% /dev run 986M 688K 985M 1% /run efivarfs 256K 46K 206K 19% /sys/firmware/efi/efivars /dev/nvme0n1p2 7.5G 2.1G 5.1G 29% / tmpfs 986M 0 986M 0% /dev/shm tmpfs 986M 0 986M 0% /tmp /dev/nvme0n1p2 7.5G 2.1G 5.1G 29% /.snapshots /dev/nvme0n1p2 7.5G 2.1G 5.1G 29% /var/cache/pacman/pkg /dev/nvme0n1p2 7.5G 2.1G 5.1G 29% /home /dev/nvme0n1p2 7.5G 2.1G 5.1G 29% /var/log /dev/nvme0n1p1 511M 61M 451M 12% /boot tmpfs 198M 4.0K 198M 1% /run/user/0 RHEL 和类似 RHEL 的发行版（从 9 开始）【本人没有企业授权测不了】
  </content></entry><entry><title>kubernetes支持swap了，但是cgroup v2</title><url>/post/kubernetes-supports-swap-but-cgroup-v2-zaivgs.html</url><categories><category>技术</category></categories><tags><tag>运维</tag><tag>Linux</tag><tag>kubernetes</tag></tags><content type="html">  kubernetes支持swap了，但是cgroup v2 结论： Container-Optimized OS（从 M97 开始）、Ubuntu（从 21.10 开始，推荐 22.04+）、Debian GNU/Linux（从 Debian 11 Bullseye 开始）、Fedora（从 31 开始）、Arch Linux（从 2021 年 4 月开始）、RHEL 和类似 RHEL 的发行版（从 9 开始）支持使用swap但是要配置，未配置前先用sudo swapoff -a​暂时关闭。
其他系统要手动在内核配置cgroup v2
来自官方文档： 交换分区的配置。kubelet 的默认行为是在节点上检测到交换内存时无法启动。 kubelet 自 v1.22 起已开始支持交换分区。自 v1.28 起，仅针对 cgroup v2 支持交换分区； kubelet 的 NodeSwap 特性门控处于 Beta 阶段，但默认被禁用。
如果 kubelet 未被正确配置使用交换分区，则你必须禁用交换分区。 例如，sudo swapoff -a​ 将暂时禁用交换分区。要使此更改在重启后保持不变，请确保在如 /etc/fstab​、systemd.swap​ 等配置文件中禁用交换分区，具体取决于你的系统如何配置。 cgroup v2 要检查你的发行版使用的是哪个 cgroup 版本，请在该节点上运行 stat -fc %T /sys/fs/cgroup/​ 命令：
stat -fc %T /sys/fs/cgroup/ 对于 cgroup v2，输出为 cgroup2fs​。
对于 cgroup v1，输出为 tmpfs​。
cgroup v2 具有以下要求：
操作系统发行版启用 cgroup v2
Linux 内核为 5.8 或更高版本
容器运行时支持 cgroup v2。例如：
containerd v1.4 和更高版本 cri-o v1.20 和更高版本 kubelet 和容器运行时被配置为使用 systemd cgroup 驱动 Linux 发行版 cgroup v2 支持 有关使用 cgroup v2 的 Linux 发行版的列表， 请参阅 cgroup v2 文档 。
Container-Optimized OS（从 M97 开始） Ubuntu（从 21.10 开始，推荐 22.04+） Debian GNU/Linux（从 Debian 11 Bullseye 开始） Fedora（从 31 开始） Arch Linux（从 2021 年 4 月开始） RHEL 和类似 RHEL 的发行版（从 9 开始） 要检查你的发行版是否使用 cgroup v2， 请参阅你的发行版文档或遵循 识别 Linux 节点上的 cgroup 版本 中的指示说明。
你还可以通过修改内核 cmdline 引导参数在你的 Linux 发行版上手动启用 cgroup v2。 如果你的发行版使用 GRUB，则应在 /etc/default/grub​ 下的 GRUB_CMDLINE_LINUX​ 中添加 systemd.unified_cgroup_hierarchy=1​， 然后执行 sudo update-grub​。不过，推荐的方法仍是使用一个默认已启用 cgroup v2 的发行版。
  </content></entry><entry><title>Jenkins入门</title><url>/post/jenkins-entry-z2edmed.html</url><categories><category>技术</category></categories><tags><tag>运维</tag><tag>Linux</tag><tag>Jenkins</tag></tags><content type="html">  Jenkins入门 第0章 Jenkins介绍 1.jenkins是一个开源的持续集成工具，由java语言开发 2.jenkins是一个调度平台，拥有众多的插件，绝大部分功能都是由插件来完成的 第1章 Jenkins安装 1.官方网站 https://www.jenkins.io/zh/ https://www.jenkins.io/zh/doc/ 2.安装部署 清华源直接下载rpm包安装即可,下载地址如下：
https://mirrors.tuna.tsinghua.edu.cn/jenkins/redhat/ 安装命令如下：
rpm -ivh jdk-8u181-linux-x64.rpm rpm -ivh jenkins-2.176.1-1.1.noarch.rpm 3.目录文件说明 [root@jenkins ~]# rpm -ql jenkins /etc/init.d/jenkins #启动文件 /etc/logrotate.d/jenkins #日志切割脚本 /etc/sysconfig/jenkins #配置文件 /usr/lib/jenkins #安装目录 /usr/lib/jenkins/jenkins.war #安装包 /usr/sbin/rcjenkins /var/cache/jenkins /var/lib/jenkins #数据目录 /var/log/jenkins #日志目录 4.配置使用root账户运行 vim /etc/sysconfig/jenkins JENKINS_USER=&amp;amp;#34;root&amp;amp;#34; 5.启动jenkins systemctl start jenkins 6.解锁Jenkins ​​
7.修改admin密码 ​​
8.使用清华源作为插件地址 清华源地址：
https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json 配置步骤：
​​
​​
​​
​​
9.使用离线安装插件 我们可以将插件提前下好，然后只需要解压到jenkins对应的目录即可
tar zxf jenkins_plugins.tar.gz -C /var/lib/jenkins/ ll /var/lib/jenkins/plugins/ 重启jenkins： …  </content></entry><entry><title>Redis快速入门</title><url>/post/redis-fast-entry-2ltiy1.html</url><categories/><tags><tag>运维</tag><tag>Linux</tag><tag>Redis</tag></tags><content type="html">  Redis快速入门 第1章 Redis介绍 1.1 Redis是什么 Redis是一种基于键值对的NoSQL数据库,与很多键值对数据库不同,redis中的值可以有string,hash,list,set,zset,geo等多种数据结构和算法组成.
因为Redis会将所有的数据都放在内存中,所以他的读写性能非常惊人.
不仅如此,Redis还可以将内存中的数据利用快照和日志的形式保存到硬盘上
Redis还提供了键过期,发布订阅,事务,流水线等附加功能.
1.2 Redis重要特性 1.速度快 Redis所有的数据都存放在内存中 Redis使用C语言实现 Redis使用单线程架构 2.基于键值对的数据结构服务器 5中数据结构:字符串,哈希,列表,集合,有序集合 3.丰富的功能 提供了键过期功能,可以实现缓存 提供了发布订阅功能,可以实现消息系统 提供了pipeline功能,客户端可以将一批命令一次性传到Redis,减少了网络开销 4.简单稳定 源码很少,3.0版本以后5万行左右. 使用单线程模型法,是的Redis服务端处理模型变得简单. 不依赖操作系统的中的类库 5.客户端语言多 java,PHP,python,C,C++,Nodejs等 6.持久化 RDB和AOF 7.主从复制 8.高可用和分布式 哨兵 集群 1.3 Redis应用场景 1.缓存-键过期时间 缓存session会话 缓存用户信息,找不到再去mysql查,查到然后回写到redis 2.排行榜-列表&amp;amp;amp;有序集合 热度排名排行榜 发布时间排行榜 3.计数器应用-天然支持计数器 帖子浏览数 视频播放次数 商品浏览数 4.社交网络-集合 踩/赞,粉丝,共同好友/喜好,推送,打标签 5.消息队列系统-发布订阅 配合elk实现日志收集 第2章 Redis安装部署 2.1 目录规划 ### redis下载目录 /data/soft/ ### redis安装目录 /opt/redis_cluster/redis_{PORT}/{conf,logs,pid} ### redis数据目录 /data/redis_cluster/redis_{PORT}/redis_{PORT}.rdb ### redis运维脚本 /root/scripts/redis_shell.sh 2.2 安装命令 编辑hosts …  </content></entry><entry><title>Tomcat各端口详解</title><url>/post/tomcat-detailed-explanation-z1jrrbj.html</url><categories/><tags><tag>运维</tag><tag>Linux</tag><tag>Tomcat</tag></tags><content type="html"><![CDATA[  Tomcat各端口详解 从tomcat配置文件中，我们可以看出，在启动tomcat的时候默认启动了3个端口，分别是8080（8443）、8009、8005。
8080（8443）端口 &amp;lt;Connector port=&amp;#34;80&amp;#34; protocol=&amp;#34;HTTP/1.1&amp;#34; connectionTimeout=&amp;#34;20000&amp;#34; redirectPort=&amp;#34;8443&amp;#34; /&amp;gt; 这个应该是我们最熟悉的一个，平常开发测试也经常用，该Connector用于监听浏览器发送的请求，设置为80后可以直接使用 http://localhost 访问。
http协议，其中redirectPort​表示如果发送的是https请求，就将请求发送到8443端口。
8443是默认的https监听端口，默认是没有开启的，如果要开启由于tomcat不自带证书所以除了取消注释之外，还需要自己生成证书并指定。
8009端口 &amp;lt;Connector port=&amp;#34;8009&amp;#34; protocol=&amp;#34;AJP/1.3&amp;#34; redirectPort=&amp;#34;8443&amp;#34; /&amp;gt; Nginx、Apache等反向代理tomcat时就可以使用ajp协议反向代理到该端口。
虽然我们经常使用http反向代理到8080端口，但由于ajp建立tcp链接后一般长时间保持，从而减少Http反复进行tcp链接和断开的开销，所以反向代理中ajp是比http高效的。
8005端口 &amp;lt;Server port=&amp;#34;8005&amp;#34; shutdown=&amp;#34;SHUTDOWN&amp;#34;&amp;gt; tomcat监听的关闭端口，就是说这个端口负责监听关闭tomcat的请求。
当执行shutdown.sh​关闭tomcat就是链接8005端口执行SHUTDOWN​命令；由此，我们直接用telnet向8005端口执行SHUTDOWN​来关闭tomcat，这也是比较正统的关闭方式，如果这个端口没被监听，那么sh脚本就是无效的。
实际上，8005和8009端口并不是必须的，尤其SHUTDOWN虽然默认是监听在127.0.0.1，但是连接到这个端口，发送SHUTDOWN​就可以无任何验证的把tomcat关闭掉，有安全隐患的。
AJP端口 …  ]]></content></entry><entry><title>Tomcat安全配置、管理规范整理</title><url>/post/tomcat-security-configuration-management-specifications-1u324h.html</url><categories><category>技术</category></categories><tags><tag>运维</tag><tag>Linux</tag><tag>Tomcat</tag></tags><content type="html">  Tomcat安全配置、管理规范整理 参考：
Tomcat安全管理规范：https://blog.csdn.net/wuxingge/article/details/116517777
tomcat 安全规范(tomcat安全加固和规范)：https://www.jb51.net/article/173899.htm
omcat安全配置规范 以及个人从业经验
以下是整理后的Tomcat安全管理配置规范，具体实施方法可以百度：
第1章：账号管理与认证授权 1.1 账号管理 共享账号管理：避免不同用户间共享账号，确保每个用户有独立的账号。 无关账号管理：删除或锁定与设备运行、维护无关的账号。 1.2 口令管理 密码复杂度：密码长度至少8位，包含数字、小写字母、大写字母和特殊符号中的至少2类。 密码历史：支持按天配置口令生存期，不长于90天。 1.3 用户权利指派 根据用户业务需求，配置其所需的最小权限。 第2章：日志配置操作 2.1 日志配置 审核登录：配置日志功能，记录用户登录信息，包括账号、登录成功与否、登录时间以及远程登录时的IP地址。 第3章：IP协议安全配置 3.1 IP协议 支持加密协议：支持使用HTTPS等加密协议进行远程维护。 第4章：设备其他配置操作 4.1 安全管理 定时登出：支持定时账户自动登出，用户需重新登录。 更改默认端口：更改Tomcat服务器默认端口，避免使用默认端口。 错误页面处理：自定义错误页面，避免显示敏感信息。 目录列表访问限制：禁止Tomcat列出目录内容。 4.2 其他安全措施 版本安全：升级到最新稳定版，避免跨版本升级。 服务降权：使用普通用户启动Tomcat，避免使用root用户。 端口保护：更改管理端口和AJP端口，避免使用默认端口。 禁用管理端：删除默认的tomcat-users.xml​文件和webapps​目录下的默认文件。 隐藏Tomcat版本信息：修改ServerInfo.properties​文件，隐藏版本信息。 关闭WAR自动部署：关闭Tomcat的WAR包热部署功能。 脚本权限回收：控制CATALINA_HOME/bin​目录下的脚本文件权限。 访问日志格式规范：开启访问日志中的Referer和User-Agent记录。 访问限制：通过配置限定访问的IP来源。 附录：建议配置及标准执行方案 配置文件：提 …  </content></entry><entry><title>Tomcat 的组成结构和主配置文件Server.xml详解</title><url>/post/tomcat-s-composition-structure-and-main-configuration-file-serverxml-detailed-explanation-15kcly.html</url><categories/><tags><tag>运维</tag><tag>Linux</tag><tag>Tomcat</tag></tags><content type="html"><![CDATA[  Tomcat 的组成结构和主配置文件Server.xml详解 参考：《TOMCAT与JAVA WEB开发技术详解 第3版》
https://www.jianshu.com/p/2789af11299f Tomcat 本身由一系列可配置的组件构成，其中核心组件是 Servlet容器组件，它是所有 其他 Tomcat 组件的顶层容器，用＜CATALINA_HOME＞ 表示 Tomcat 的安装根目录。Tomcat 的各个组件可以在/conf7server.xml 文件中进行配 置，每个 Tomcat 组件在 server.xml 文件中对应一种配置元素。以下代码以 XML 的形式展示 了各种 Tomcat 组件之间的关系：
&amp;lt;Server&amp;gt; &amp;lt;Service&amp;gt; &amp;lt;Connector /&amp;gt; &amp;lt;Engine&amp;gt; &amp;lt;Host&amp;gt; &amp;lt;Context&amp;gt; &amp;lt;/Context&amp;gt; &amp;lt;/Host&amp;gt; &amp;lt;/Engine&amp;gt; &amp;lt;/Service&amp;gt; &amp;lt;/Server&amp;gt; 在以上 XML 代码中，每个元素都代表一种 Tomcat 组件。这些元素可分为四类：
• 顶层类元素 包括〈Server〉元素和元素，它们位于整个配置文件的顶层。
• 连接器类元素 为〈Connector〉元素，代表介于客户与服务器之间的通信接口，负责将客户的请求发送 给服务器，并将服务器的响应结果发送给客户。
• 容器类元素，代表处理客户请求并生成响应结果的组件，有四种容器类元素，分别为〈Engine〉、、 和元素。Engine 组件为特定的 Service 组 件处理所有客户请求， Host 组件为特定的虚拟主机处理所有客户请求，Context 组件为特定的 Web 应用处理所有客 户请求。Cluster 组件负责为 Tomcat 集群系统进行会话复制、Context 组件的属性的复制，以 及集群范围内 WAR 文件的发布。本书第 26 章的 26.5 节（Tomat 集群）对配置 Tomcat 集群 系统做了进一步介绍。
• 嵌套类元素 代表可以嵌入到容器中的组件，如元素和元素等，这些元素的作用将在 后面的章节做介绍
Tomcat 的组成结构是由 自身的实现决定的，与 Servlet 规 范无关。不同 …  ]]></content></entry><entry><title>tomcat管理</title><url>/post/tomcat-management-ztwwto.html</url><categories/><tags/><content type="html"><![CDATA[  tomcat管理 测试功能,生产环境不要用
Tomcat管理功能用于对Tomcat自身以及部署在Tomcat的应用管理的web应用,在默认的情况下处于禁止状态的.如果需要开启这个功能,就要配置管理用户,即配置前面说过的tomcat-user.xml
下面是命令集合:
修改tomcat-users.xml
[root@sweb01 ~]# cat /opt/tomcat/conf/tomcat-users.xml &lt;?xml version=&#39;1.0&#39; encoding=&#39;utf-8&#39;?&gt; &lt;!-- 这是个优雅的注释 --&gt; &lt;tomcat-users xmlns=&#34;http://tomcat.apache.org/xml&#34; xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34; xsi:schemaLocation=&#34;http://tomcat.apache.org/xml tomcat-users.xsd&#34; version=&#34;1.0&#34;&gt; &lt;role rolename=&#34;admin-gui&#34;/&gt; &lt;role rolename=&#34;host-gui&#34;/&gt; &lt;role rolename=&#34;manager-gui&#34;/&gt; &lt;user username=&#34;tomcat&#34; password=&#34;tomcat&#34; roles=&#34;admin-gui,host-gui,manager-gui&#34;/&gt; &lt;/tomcat-users&gt; 修改context.xml文件
[root@sweb01 ~]# grep &#34;10&#34; /opt/tomcat/webapps/manager/META-INF/context.xml allow=&#34;10\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1&#34; /&gt; 重新启动tomcat
[root@sweb01 ~]# /opt/tomcat/bin/shutdown.sh Using CATALINA_BASE: /opt/tomcat Using CATALINA_HOME: /opt/tomcat Using CATALINA_TMPDIR: /opt/tomcat/temp Using JRE_HOME: /usr Using CLASSPATH: /opt/tomcat/bin/bootstrap.jar:/opt/tomcat/bin/tomcat-juli.jar [root@sweb01 ~]# /opt/tomcat/bin/startup.sh Using CATALINA_BASE: /opt/tomcat Using CATALINA_HOME: /opt/tomcat Using CATALINA_TMPDIR: /opt/tomcat/temp Using JRE_HOME: /usr Using CLASSPATH: /opt/tomcat/bin/bootstrap.jar:/opt/tomcat/bin/tomcat-juli.jar Tomcat started. ​​
作者：被运维耽误的厨子
链接：https://www.jianshu.com/p/2789af11299f
来源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
  ]]></content></entry><entry><title>Tomcat 的目录结构</title><url>/post/tomcat-s-directory-structure-zdhbtf.html</url><categories/><tags><tag>运维</tag><tag>Linux</tag><tag>Tomcat</tag></tags><content type="html">  Tomcat 的目录结构 Tomcat9.x 的目录结构参见 表 3-3, 表中的目录都是＜CATALINA_HOME＞ 的子目录。
​​
在Linux系统中如下
[root@sweb01 ~]# cd /opt/tomcat/ [root@sweb01 /opt/tomcat]# tree -L 1 ├── bin #用以启动,关闭Tomcat或其他脚本功能的脚本(.bat和.sh) ├── conf #用以配置Tomcat的XML及DTD文件 ├── lib #存放web应用能访问的JAR包 ├── logs #Catalina和其他web应用程序的日志文件 ├── temp #临时文件 ├── webapps #Web应用程序根目录 └── work #用以产生有JSP编译出的Servlet的.java和.class文件 webapps目录
[root@sweb01 /opt/tomcat]# cd webapps/ [root@sweb01 /opt/tomcat/webapps]# ll 总用量 8 drwxr-x--- 14 root root 4096 8月 10 16:37 docs #tomcat帮助文档 drwxr-x--- 6 root root 78 8月 10 16:37 examples #web应用 drwxr-x--- 5 root root 82 8月 10 16:37 host-manager #管理 drwxr-x--- 5 root root 97 8月 10 16:37 manager #管理 drwxr-x--- 3 root root 4096 8月 10 16:37 ROOT #默认网站根目录 bin目录
脚本 作用 startup.sh 开启tomcat脚本 shutdown.sh 关闭tomcat脚本 catalina.shtomcat 核心管理脚本,以后jvm优化参数及相关配置,修改tomcat启动参数   </content></entry><entry><title>Tomcat一键部署脚本</title><url>/post/tomcat-one-click-deployment-script-1zvvpr.html</url><categories/><tags><tag>运维</tag><tag>Linux</tag><tag>Tomcat</tag></tags><content type="html"><![CDATA[  Tomcat一键部署脚本 环境：centos7、已安装wget、已换阿里源
简易脚本，抛砖引玉
Tomcat一键部署脚本 #!/bin/bash # 安装Java yum install java-1.8.0 -y # 检查Java是否安装成功 java -version if [ $? -ne 0 ]; then echo &#34;Java安装失败，请检查后重试。&#34; exit 1 fi # 创建软件目录 mkdir -p /data/soft # 切换到软件目录 cd /data/soft # 下载Tomcat安装包 wget http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.99/bin/apache-tomcat-8.5.99.tar.gz # 解压Tomcat安装包到/opt目录 tar zxf apache-tomcat-8.5.99.tar.gz -C /opt/ # 创建软链接 ln -s /opt/apache-tomcat-8.5.99 /opt/tomcat # 配置环境变量 echo &#39;export TOMCAT_HOME=/opt/tomcat&#39; &gt;&gt; /etc/profile source /etc/profile # 启动Tomcat /opt/tomcat/bin/startup.sh # 检查Tomcat是否启动成功 if [ $? -eq 0 ]; then echo &#34;Tomcat安装并启动成功。&#34; else echo &#34;Tomcat启动失败，请检查日志。&#34; exit 1 fi # 检查Tomcat服务是否正在运行 ps -ef | grep tomcat # 显示Tomcat日志 tail -f /opt/tomcat/logs/catalina.out # 脚本结束   ]]></content></entry><entry><title>监控TCP11种状态集命令、脚本（centos7）</title><url>/post/surveillance-tcp-11-status-set-commands-and-scripts-centos7-zbpvsa.html</url><categories><category>技术</category></categories><tags><tag>运维</tag><tag>Linux</tag><tag>TCP/IP</tag></tags><content type="html"><![CDATA[  监控TCP11种状态集命令、脚本（centos7） 先决条件：
用户有足够的权限来执行 netstat​ 命令。
不是root用户可能需要在命令前加上 sudo​。
安装了 netstat​。
命令合集，脚本：
#!/bin/bash # 清除旧的输出 clear # 显示所有TCP连接的状态 echo &amp;#34;所有TCP连接状态：&amp;#34; netstat -ant # 显示LISTEN状态的连接 echo &amp;#34;处于LISTEN状态的连接：&amp;#34; netstat -an | grep LISTEN # 显示SYN_SENT状态的连接 echo &amp;#34;处于SYN_SENT状态的连接：&amp;#34; netstat -an | grep SYN_SENT # 显示SYN_RECEIVED状态的连接 echo &amp;#34;处于SYN_RECEIVED状态的连接：&amp;#34; netstat -an | grep SYN_RECEIVED # 显示ESTABLISHED状态的连接 echo &amp;#34;处于ESTABLISHED状态的连接：&amp;#34; netstat -an | grep ESTABLISHED # 显示FIN_WAIT1状态的连接 echo &amp;#34;处于FIN_WAIT1状态的连接：&amp;#34; netstat -an | grep FIN_WAIT1 # 显示FIN_WAIT2状态的连接 echo &amp;#34;处于FIN_WAIT2状态的连接：&amp;#34; netstat -an | grep FIN_WAIT2 # 显示CLOSE_WAIT状态的连接 echo &amp;#34;处于CLOSE_WAIT状态的连接：&amp;#34; netstat -an | grep CLOSE_WAIT # 显示CLOSING状态的连接 echo &amp;#34;处于CLOSING状态的连接：&amp;#34; netstat -an | grep CLOSING # 显示LAST_ACK状态的连接 echo &amp;#34;处于LAST_ACK状态的连接：&amp;#34; netstat -an | grep LAST_ACK # 显示TIME_WAIT状态的连接 echo &amp;#34;处于TIME_WAIT状态的连接：&amp;#34; netstat -an | grep TIME_WAIT # 显 …  ]]></content></entry><entry><title>seafile升级最新版注意事项（11.05版本为例）</title><url>/post/seafile-upgrade-the-latest-version-of-precautions-u4rxq.html</url><categories><category>技术</category></categories><tags><tag>运维</tag><tag>Linux</tag><tag>seafile</tag></tags><content type="html"><![CDATA[  seafile升级最新版注意事项（11.05版本为例） 笔者以当前最新版11.05为例，以下内容为亲测
‍
1、docker-compose.yml文件不能使用seafileltd/seafile-mc:latest，得用seafileltd/seafile-mc:11.05，具体原因不明，seafileltd/seafile-mc:latest现在是8.07的版本
2、升级后会发现无法进入管理页面，此时需要添加到 相应的 Django 设置 中conf/seahub_settings.py​：
参考： 更新到 Seafile 11.0.0 后，docker 的 CSRF 验证失败 · Issue #2707 · haiwen/seafile · GitHub CSRF_TRUSTED_ORIGINS = [&#34;https://seafile.example.com&#34;] 使用上面参考提到的 docker-compose 文件，该文件位于容器外部的/home/me/seafile/data/seafile/conf/seahub_settings.py​，在该文件最后新增一行CSRF_TRUSTED_ORIGINS = [&quot;https://seafile.example.com&quot;]​
暂时没有碰到其他问题
  ]]></content></entry><entry><title>zabbix客户端一键安装脚本</title><url>/post/zabbix-client-one-click-installation-script-z5pc5h.html</url><categories><category>技术</category></categories><tags><tag>运维</tag><tag>Linux</tag><tag>zabbix</tag></tags><content type="html"><![CDATA[  zabbix客户端（agent）一键安装初始配置脚本 本环境：centos7.9
简易安装脚本，Server=192.168.2.111​此处需要修改为server的ip地址
#!/bin/bash # 关闭SELinux、暂停防火墙 setenforce 0 systemctl stop firewalld # 安装Zabbix仓库和zabbix-agent zabbix-get rpm -ivh https://mirrors.tuna.tsinghua.edu.cn/zabbix/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-1.el7.noarch.rpm sed -i &#39;s#repo.zabbix.com#mirrors.tuna.tsinghua.edu.cn/zabbix#g&#39; /etc/yum.repos.d/zabbix.repo yum install -y zabbix-agent zabbix-get.x86_64 net-tools # 配置zabbix-agent，Server和ServerActive保持一致，Hostname根据情况修改 cat &lt;&lt; &#39;EOF&#39; &gt; /etc/zabbix/zabbix_agentd.conf PidFile=/var/run/zabbix/zabbix_agentd.pid LogFile=/var/log/zabbix/zabbix_agentd.log LogFileSize=0 Server=192.168.2.111 ServerActive=192.168.2.111 Hostname=Zabbix agent Include=/etc/zabbix/zabbix_agentd.d/*.conf EOF # 启动zabbix-agent并检查 systemctl start zabbix-agent.service systemctl enable zabbix-agent.service netstat -lntup | grep 10050   ]]></content></entry><entry><title>zabbix服务端一键安装初始配置脚本</title><url>/post/the-zabbix-service-side-is-one-click-to-install-the-initial-configuration-script-9alkk.html</url><categories><category>技术</category></categories><tags><tag>运维</tag><tag>Linux</tag><tag>zabbix</tag></tags><content type="html"><![CDATA[  zabbix服务端一键安装初始配置脚本 简易脚本，初始化数据库可以改，centos7.9亲测完美执行
#!/bin/bash # 关闭SELinux、暂停防火墙 setenforce 0 systemctl stop firewalld # 中文乱码修正 yum install -y wqy-microhei-fonts \cp -f /usr/share/fonts/wqy-microhei/wqy-microhei.ttc /usr/share/zabbix/assets/fonts/graphfont.ttf # 安装Zabbix rpm -ivh https://mirrors.tuna.tsinghua.edu.cn/zabbix/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-1.el7.noarch.rpm sed -i &amp;#39;s#repo.zabbix.com#mirrors.tuna.tsinghua.edu.cn/zabbix#g&amp;#39; /etc/yum.repos.d/zabbix.repo yum install -y zabbix-server-mysql zabbix-web-mysql zabbix-agent mariadb-server systemctl start mariadb.service &amp;amp;&amp;amp; systemctl enable mariadb.service echo &amp;#34;rpm和yum安装Zabbixc完成&amp;#34; # 初始化数据库 # mysql_secure_installation mysqladmin password 123456 mysql -uroot -p123456 &amp;lt;&amp;lt;EOF CREATE DATABASE zabbix character set utf8 collate utf8_bin; GRANT ALL PRIVILEGES ON zabbix.* TO &amp;#39;zabbix&amp;#39;@&amp;#39;localhost&amp;#39; IDENTIFIED BY &amp;#39;zabbix&amp;#39;; FLUSH PRIVILEGES; EOF echo &amp;#34;初始化数据库完成&amp;#34; # 备份并修改Zabbix …  ]]></content></entry><entry><title>执行shell脚本文件有多少种方法？有什么区别？</title><url>/post/how-many-ways-are-there-to-execute-the-shell-script-file-what-s-the-difference-18mzrt.html</url><categories><category>技术</category></categories><tags><tag>Linux</tag><tag>运维</tag></tags><content type="html">  执行shell脚本文件有多少种方法？有什么区别？ 执行.sh​文件有几种方法，主要包括：
直接运行：
./your_script.sh 这种方式需要在脚本文件的目录下执行，并确保脚本文件有执行权限 (chmod +x your_script.sh​)。这种方式的路径解析是相对于当前工作目录的。
通过bash解释器运行：
bash your_script.sh 或者
sh your_script.sh 这种方式不需要执行权限，会使用指定的解释器来运行脚本。如果你使用bash​或sh​关键字，可以确保脚本在不同的环境中都能运行。
通过source命令运行：
source your_script.sh 或者简写为：
. your_script.sh 这种方式会在当前shell环境中执行脚本，而不是启动一个新的进程。这意味着脚本中的变量和函数等将在当前shell中生效。
这几种方法的主要区别在于执行环境和作用域。直接运行和通过bash解释器运行都会创建一个新的进程，而source命令则在当前shell中执行，因此会影响当前环境。选择执行方式取决于你的需求，如果脚本需要修改当前shell的环境变量或执行其他会影响当前环境的操作，建议使用source命令。
  </content></entry><entry><title>思源笔记一键发布至Hexo、Hugo、Jekyll、Vitepress、Vuepress博客（github）并通过github action构建page并同步gitee page</title><url>/post/siyuan-notes-are-published-to-hexo-hugo-jekyll-vitepress-vuepress-blog-github-and-through-github-action-bsbh2.html</url><categories><category>技术</category></categories><tags><tag>思源笔记</tag><tag>运维</tag></tags><content type="html"><![CDATA[  思源笔记一键发布至Hexo、Hugo、Jekyll、Vitepress、Vuepress博客（github）并通过github action构建page并同步gitee page 先决条件：思源笔记、一键发布工具、Hexo\Hugo\Jekyll\Vitepress\Vuepress相关主题
以Hugo的 hugo-theme-next 主题示例，其他的同理，构建文件不同
注意事项：Hugo使用无序和有序列表尽量不要超过3层
部署和配置时长：1小时+
部署流程：克隆Hugo主题至自己仓库-&amp;gt;创建主页仓库-&amp;gt;获取github个人访问令牌token-&amp;gt;github action构建并输出至主页主页-&amp;gt;gitee导入github仓库并配置镜像仓库-&amp;gt;开通gitee page-&amp;gt;配置 hugo-theme-next 使用流程：思源笔记一键发布插件配置-&amp;gt;使用一键发布插件发布文章并选择hugo
部署详情：
克隆Hugo主题至自己仓库
⏬ 克隆主题 点击右上角的 Use this template​​ 绿色按钮然后填写代码仓库的相关信息，参考如下：
​ https://camo.githubusercontent.com/0031520ad9bb551333a37cf756fbfb3f538e6f33638cd3318e5d70f94aae28e8/68747470733a2f2f696d67732e6c6973656e6875692e636e2f6875676f2d6e6578742f7573652d6875676f2d6e6578742d737461727465722e706e67 最后点击 Create repository from template​​ 绿色按钮，会直接在你的空间中生成站点代码，再使用git clone​​命令把它克隆到本地进行创作。
记得首次完全克隆后，需要在根目录中使用如下的 Git​​ 子模块更新命令拉取 hugo-theme-next​​ 主题的最新版本。
创建主页仓库
自定义首页，首先需要创建一个与你 Github ID 同名的仓库
​​
创建完成后就可以开始为你的首页添加一些有趣的内容了，代码格式可以是 markdown​ 语法，也可以是 HTML​ 语法，但 HTML 的扩展性更强一点，因此笔者使 …  ]]></content></entry><entry><title>Tomcat学习路线roadmap和个人入门知识摘录</title><url>/post/tomcat-learning-route-roadmap-and-personal-entry-knowledge-excerpt-1xckaw.html</url><categories><category>技术</category></categories><tags><tag>运维</tag><tag>Tomcat</tag></tags><content type="html">  Tomcat学习路线roadmap和个人入门知识摘录 roadmap 参考《TOMCAT与JAVA WEB开发技术详解 第3版》，内容非常非常详细，初期入门并不需要学习到那么详细，后面精进学习可按图索骥，或者有需要再看看就行 第 1 章 Web 运作原理探析
读者不妨带着以下问题去阅读本章开头的内容：
●在整个 Web体系中，浏览器和Web服务器各自的功能是什么?
●浏览器和Web服务器采用HTTP协议进行通信，该协议规定了通信的哪些具体细节?
本章接着介绍了Web的发展历程。
●第一个阶段: 发布静态HTML文档。
●第二个阶段:发布静态多媒体信息。
●第三个阶段:提供浏览器端与用户的动态交互功能。
●第四个阶段:提供服务器端与用户的动态交互功能。
●第五个阶段:发布基于Web的应用程序，即Web应用。
●第六个阶段:发布Web服务。
●第七个阶段:先后推出Web 2.0以及Web 3.0。Web 2.0是全民共建的Web,用户
共同为Web提供丰富的内容。在Web 3.0中，网络为用户提供更智能、更个性化
的服务。
1.1 Web 的概念
Web 的概念如下：Web 是一种分布式应用架构，旨在共享分布在网络上的各个 Web 服 务器中所有互相连接的信息。采用客户/服务器（B/S结构（Browser/Server））通信模式，客户与服务器之间用 HTTP 协议通信。Web 使用超级文本技术（HTML） 来连接网络上的信息。信息存放在服务器端， 客户机通过浏览器（例如 IE 或 Chrome）就可以查找网络中各个 Web服务器上的信息。
​​ 概念 WWW（World Wide Web）是指全球范围内的 Web 1.2 HTML 简介
HTML ( Hyper Text Markup Language) 是指超文本标记语言。 1.3 URL 简介
1.4 HTTP 简介
1.4.1 HTTP 请求格式
HTTP 规定，HTTP 请求由如下 3 部分构成：
• 请求方法、URI 和 HTTP 的版本。
• 请求头 ( RequestHeader)。
• 请求正文 (RequestContent)。
​​
POST /hello.jsp HTTP/1.1 // HTTP 请求的第一行包括请求方式、URI 和协议版本这 3 项内容，以空格分开 // “POST”为请求方 …  </content></entry><entry><title>Zabbix学习路线及重难点摘录</title><url>/post/zabbix-learning-route-and-heavy-difficulties-excerpt-zovbcn.html</url><categories><category>技术</category></categories><tags><tag>运维</tag><tag>Linux</tag><tag>zabbix</tag></tags><content type="html">  Zabbix学习路线及重难点摘录 zabbix相关书籍
Zabbix企业级分布式监控系统 (吴兆松) (Z-Library) 深入理解Zabbix监控系统 (鲍光亚) (Z-Library) roadmap
本文根据参考书籍目录得出roadmap并摘录要点为新手作指引，未完善的内容可自行百度学习
参考书籍：Zabbix企业级分布式监控系统
第1章 开篇——监控系统简介
1.1 监控系统的功能概述（什么是监控系统？） 监控系统，一是监测，二是控制，监测以达到控制的效果，在计算机领域，可以将其分为5种监控类型。
应用性能监控（Application Performance Monitoring）。 业务交易监控（Business Transaction Monitoring）。 网络性能监控（Network Monitoring）。 操作系统监控（System Monitoring）。 网络站点监控（Website Monitoring）。 大规模的监控环境，被监控节点多且监控类型多产生的数据和网络连接开销非常大，数据采集方式除了使用主动采集模式，还需要使用代理架构分摊服务器端的性能开销。
​​
通常监控系统会选用以下 几种数据存储方式。
（1）本地存储。使用本地磁盘，基于文件的方式存储。
（2）使用时序数据库进行数据存储，如古老的环状数据库 （Round Robin Database, RRD）等。近年来，随着时序数据技术的不断发展，出现了比较成熟的时序数据库，如OpenTSDB（底层存储基于 HBase）、Graphite、InfluxDB、Prometheus等，与直接使用文件的存储方式相比，这些时序数据库更加高效。
（ 3 ） 使 用 数 据 库 管 理 系 统 （ Database Management System, DBMS）进行数据存储，如常见的MySQL、Oracle、SQL Server等。使用 这种数据库来存储监控数据，当数据量达到一定规模时，其读/写效率 均会显著下降，数据库的压力比较大，通常优化方案思路有3种，一是 减少数据的存储量；二是优化数据库本身，调整配置参数，优化运行 环境；三是使用分布式数据库和数据库集群技术方案。
（4）使用NoSQL数据库进行数据存储。NoSQL相对于DBMS这种传统 的数据库有着一些天然的优势，单机的QPS通常较 …  </content></entry><entry><title>关于 Hugo NexT 组织</title><url>/about.html</url><categories/><tags/><content type="html">  Hugo NexT 组织是由众多喜爱 NexT 主题及风格的世界各地友人共同组建而成，为的就是让这个主题继续在 Hugo 引擎中也能得到发扬光大，在此也欢迎你的加入！
我们的愿景 延续 NexT 经典的黑白调搭配，保持简单的易用性及强大的功能。
使用反馈 加入 GitHub Discussions 或 Gitter 在线讨论 &amp;#x1f37b; GitHub Issues 提交错误报告 &amp;#x1f41b; GitHub Feature 表新功能的想法 &amp;#x2728; 同时国内用户也可加入 QQ 群交流： 604710815
  </content></entry><entry><title>文章目录导航</title><url>/post/table-of-content.html</url><categories><category>示例</category></categories><tags><tag>目录</tag><tag>导航</tag><tag>博客</tag></tags><content type="html">  巴顿将军说过：“衡量一个人是否成功，不是看他站到顶峰，而是从顶峰跌落之后的反弹力”，褚时健的人生便是如此，中年发家致富，名利双收，之后又跌落到谷底，等到74岁再创业，10年后带着褚橙归来，东山再起收获亿万财富，他的发展轨迹就是反弹的过程。
早年的故事 起始 2014年的春天，在云南省华宁县和宜良县的交界处，一座名叫矣则的小山村里，一处已经有上百年历史的古旧四合院宅子被拆掉。村委会正带领村民们进行“美丽乡村”的建设，一年以后，旧有村居将再也看不到，代之而起的是钢筋混凝土的新式民居。就像10年、20年前中国大小城市的改造一样，这个群山围绕的小村子也开始陷入“工地模式”。
童年浪花 在江河边长大的孩子几乎都有一个当仁不让的特长：善水。褚时健也不例外，他不仅从小就在南盘江和花鱼塘里扑腾出了上佳的游泳技术，五六岁已经可以一个猛子扎出老远，而且从七八岁就可以在南盘江和河滩上的鱼塘里捉鱼了。
少年故事 褚时健在乡村自由自在生活的十多年，其实正是中国社会风雨飘摇的十多年。特别是1937年卢沟桥事变后，日本人发动全面侵华战争，短短两三年间，中国的大部分国土相继沦陷
激情的青春十年 当上了游击队员 1948年夏天，褚时健回乡，在禄丰车站小学做了一名老师，同时也和褚时仁、褚时杰一起继续保持与共产党组织的联系，做一些传递情报的工作
战火纷飞 因为战斗力相较悬殊，所以游击队只能是靠打一枪换一个地方的办法，专找敌人薄弱的地方攻击，但更多时候，都是在防御和转移阵地。
迎来解放 1949年12月，国民党云南省主席卢汉在昆明宣布起义，云南正式拉开解放的序幕。1950年2月20日，陈赓、宋任穷、周保中率解放军第二野战军第四兵团进入昆明，24日，陈赓宣布云南全境解放。
生活的断层 跌入生活底层 “反右”运动中被打倒的人在“右派”身份确定后，只有一条路可走：下放到农场。农场名副其实，就是干农活儿的地方，必须过和农民一样的生活。
尾声 岁月像一条河 2015年，是褚时健和马静芬结婚60周年，被称为“钻石婚”的纪念年份。这简直是一份人生的奖赏,在中国离婚率愈益升高的当下，60年的婚姻，几乎就像一个前世之梦。一个甲子的相伴相随，褚时健和马静芬共同经历了国家和个人的各种风浪，共同面对过生死。他们两人已经不仅是夫妻，更是一对战友。尽管马静芬偶尔会对褚时健年轻时候的粗心抱怨上两句，但说到最后，她会说一句：“没有我就没 …  </content></entry><entry><title>站点示例</title><url>/flinks.html</url><categories/><tags/><content type="html">  如想交换本站友情链接，请在评论区留下你的站点信息，格式参考如下：
- name: Hugo-NexT desc: Hugo NexT 官方预览网站。 avatar: https://hugo-next.eu.org/imgs/hugo_next_avatar.png link: https://hugo-next.eu.org   </content></entry></search>